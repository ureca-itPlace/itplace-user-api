# GitHub Actions 워크플로우 이름
name: CICD

# 워크플로우가 실행될 조건
on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

# 워크플로우 실행에 필요한 권한
permissions:
  contents: read

# 실행될 작업들의 목록
jobs:
  # 'build' 작업
  build:
    runs-on: ubuntu-latest # 작업이 실행될 가상 환경
    steps:
      # 1. 소스 코드 체크아웃
      - uses: actions/checkout@v3

      # 2. OpenJDK 17 설치
      - name: Install JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto' # corretto (OpenJDK) 배포판 사용

      # 3. Gradle 빌드
      - name: Build with Gradle
        run: |
          echo ${[secrets.APPLICATION_SECRET}} | base64 --decode > ./src/main/resources/application-secret.yml
          chmod +x ./gradlew
          ./gradlew build -x test
      # gradlew 실행 권한을 부여하고, 테스트를 제외하여 빌드합니다.

      # 4. DockerHub 로그인
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 5. Docker 이미지 빌드
      - name: Build Docker
        run: docker build --platform linux/amd64 -t ${{ secrets.DOCKERHUB_USERNAME }}/live_server .
        
      # 6. Docker 이미지 푸시
      - name: Push Docker
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/live_server:latest

  # 'deploy' 작업
  deploy:
    needs: build # 'build' 작업이 성공해야 실행됨
    runs-on: ubuntu-latest
    steps:
      # 1. 배포 대상 서버 환경 설정 (Blue/Green)
      - name: Set target IP
        run: |
          STATUS=$(curl -o /dev/null -w "%{http_code}" "http://${{ secrets.LIVE_SERVER_IP }}/env")
          echo $STATUS
          if [ $STATUS = 200 ]; then
            CURRENT_UPSTREAM=$(curl -s "http://${{ secrets.LIVE_SERVER_IP }}/env")
          else
            CURRENT_UPSTREAM=green
          fi
          echo CURRENT_UPSTREAM=$CURRENT_UPSTREAM >> $GITHUB_ENV
          if [ $CURRENT_UPSTREAM = blue ]; then
            echo "CURRENT_PORT=8080" >> $GITHUB_ENV
            echo "STOPPED_PORT=8081" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=green" >> $GITHUB_ENV
          elif [ $CURRENT_UPSTREAM = green ]; then
            echo "CURRENT_PORT=8081" >> $GITHUB_ENV
            echo "STOPPED_PORT=8080" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=blue" >> $GITHUB_ENV
          else
            echo "error"
            exit 1
          fi
          
      # 2. Docker Compose로 새로운 버전 실행
      - name: Docker compose
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/live_server:latest
            sudo docker-compose -f docker-compose-${{env.TARGET_UPSTREAM}}.yml up -d
            
      # 3. 새로운 버전의 서버가 정상적으로 실행되었는지 확인
      - name: Check deploy server URL
        uses: jtalk/url-health-check-action@v3
        with:
          url: http://${{ secrets.LIVE_SERVER_IP }}:${{env.STOPPED_PORT}}/env
          max-attempts: 5
          retry-delay: 10s

      # 4. Nginx Upstream 변경하여 트래픽 전환
      - name: Change nginx upstream
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker exec -i nginxserver bash -c 'echo "set \$service_url ${{ env.TARGET_UPSTREAM }};" > /etc/nginx/conf.d/service-env.inc && nginx -s reload' 

      # 5. 이전 버전의 서버 중지 및 제거
      - name: Stop current server
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker stop ${{env.CURRENT_UPSTREAM}}
            sudo docker rm ${{env.CURRENT_UPSTREAM}}
